function el (container, append = false) {
    var self = this;
    self.container = container;
    self.el = null;
    self.html = "";

    self.add_to_page = function () {
        // format the string (removing unwanted whitespace)
        self.html = self.html.replace(/\s*\n\s+/g,'');

        // add to the page
        if (self.container) {
            if (append == "prepend") {
                self.container.prepend(self.html);
                self.el = self.container.children().first();
            } else if (append) {
                self.container.append(self.html);
                self.el = self.container.children().last();
            } else {
                self.container.html(self.html);
                self.el = self.container.children().last();
            }
        }
    }
}

function user_menu (container, append = false) {
    var self = this;
    el.call(self, container);

    self.message_l = [];
    self.last_user = null;
    self.typing_timeout = 5000;
    self.typing_timer = null;
    self.typing_d = {};

    if (id.includes("=")) {
        // it's a user:user thread
        self.user_id = id.split("=")[1]
        self.user = fp.user_d[self.user_id];
        self.pic_url = self.user.pic_url;
        self.label = self.user.full_name;
        self.thread = fp.user_thread_d[self.user_id];
        if (self.thread) {
            self.id = self.thread.id;
        } else {
            self.id = null;
        }
    } else {
        // it's a group thread
        self.thread = fp.thread_d[id];
        if (self.thread.user) {
            let user = fp.user_d[self.thread.user];
            self.label = user.full_name;
        } else {
            self.label = self.thread.label;
        }
        self.user_id = null;
        self.id = id;
    }

    // initialize the thread
    self.init = function () {
        self.html = `
          <div id="thread">
            <div id="label">
              <span>
                <img class="pic" src="${self.pic_url}">
                ${self.label}
              </span>
            </div>
            <div id="thread"></div>
            <div id="thread_input_wrapper">
              <div id="thread_input_btn">
                ${svg.plus}
              </div>
              <div id="thread_input" class="textarea" contenteditable>
              </div>
              <div id="emoji">
                <img src="${utility.static_url('img/smile.svg')}" />
              </div>
            </div>
          </div>`;

        self.add_to_page();
        self.thread_el = self.el.find("div#thread");
        self.input_el = self.el.find("div#thread_input");
        self.input_el.focus();
        self.init_handlers();
    }

    // initialize event handlers
    self.init_handlers = function () {
        // register with the api
        fp.api.register(self);

        // get the thread history
        if (self.id) {
            fp.api.query({
                'chat.get_thread_history': {
                    thread_id: self.id,
                }
            });
        }

        /* typing in the input */
        self.el.on("keypress", "div#thread_input", function(e) {
            if (e.which == 13) {
                e.preventDefault();
                let msg = $(this).text();
                if (msg) {
                    // send the message over the websocket
                    fp.api.query({
                        'chat.send_message': {
                            thread_id: self.id,
                            user_id: self.user_id,
                            text: msg,
                        }
                    });

                    $(this).empty();
                }
                return false;
            } else if (self.id) {
                // clear typing timeout
                if (self.typing_timer) {
                    clearTimeout(self.typing_timer);
                } else {
                    // typing notifications
                    fp.api.query({
                        'chat.send_typing': {
                            thread_id: self.id,
                        }
                    });
                }

                self.typing_timer = setTimeout(() => {
                    // typing notifications
                    fp.api.query({
                        'chat.send_typing': {
                            clear: true,
                            thread_id: self.id,
                        }
                    });
                    self.typing_timer = null;
                }, self.typing_timeout);
            }
        })

        /* emoji popup */
        self.el.on("click", "div#emoji", function (e) {
            var emoji_btn = $(this);
            let pickerOptions = {
                theme: "light",
                onEmojiSelect: console.log,
                previewPosition: "none",
                navPosition: "bottom",
                perLine: 10,
                noCountryFlags: true,
                maxFrequentRows: 1,
                emojiButtonSize: 32,
                emojiSize: 22,
                autoFocus: true,
                onClickOutside: function (e) {
                    $('em-emoji-picker').remove();
                },
                onEmojiSelect: function (e) {
                    $('em-emoji-picker').remove();
                    self.input_el.append(e.native);
                    utility.placeCursorAtEnd(self.input_el.get(0));
                },
            }
            const picker = new EmojiMart.Picker(pickerOptions);
            self.el.find("div#thread_input").append(picker);
            return false;
        });

        /* autohide the scroll bar */
        scroll_autohide(self, self.thread_el);
    }

    // add a typing indicator
    self.add_typing = function (user_id) {
        if (!(user_id in self.typing_d)) {
            let user = fp.user_d[user_id];

            // get the name to show
            let name;
            if (self.thread.type == 0) {
                name = user.first_name;
            } else {
                name = user.full_name;
            }

            self.thread_el.prepend(`<div class="divider">`+
                                   `<span>${name} is typing...</span>`+
                                   `</div>`);
            self.scroll_to_end();
            self.typing_d[user_id] = self.thread_el.children().first();
        }
    }

    // remove a typing indicator
    self.remove_typing = function (user_id) {
        if (user_id in self.typing_d) {
            self.typing_d[user_id].remove();
            delete self.typing_d[user_id];
        }
    }

    // add a mesage
    self.add_message = function (msg, update = false) {
        date = utility.getDateString(msg.timestamp);

        if (date != self.last_date) {
            self.last_user = null;
            self.thread_el.prepend(`<div class="divider timestamp"><span>${date}</span></div>`);
        }
        if (msg.user == self.last_user) {
            self.message_l.push(new message (self.latest.el, self, msg, self.message_l.length, true));
        } else {
            self.message_l.push(new message (self.thread_el, self, msg, self.message_l.length));
            self.last_user = msg.user;
            self.latest = self.message_l.last();
        }
        if (update) {
            self.scroll_to_end();
        }
        self.last_date = utility.getDateString(msg.timestamp);
    }

    self.scroll_to_end = function () {
        self.thread_el.scrollTop(self.thread_el.prop("scrollHeight"));
    }

    self.seen = function () {
        if (fp.active && self.thread.seen[fp.user.id] < self.message_l.length-1) {
            fp.api.query({
                'chat.send_seen': {
                    thread_id: self.id,
                    message_idx: self.message_l.length-1
                }
            });
        }
    }

    self.update_seen = function () {
        // clear the seen
        self.el.find('.seen').empty();

        for (var uid in self.thread.seen) {
            if (uid != fp.user.id) {
                let seen_idx = self.thread.seen[uid];
                let message = self.message_l[seen_idx];
                message.add_seen(uid);
            }
        }
    }

    self.on_active = function () {
        self.seen();
    }

    /*
     * websocket handlers
     */
    self.handler = {
        /* thread history was received */
        thread: function (opt) {
            for (let msg of opt.message_l) {
                self.add_message(msg);
            }
            self.seen();
            self.update_seen();
        },

        /* somebody sent us a message */
        message: function (opt) {
            // make sure it's for this thread
            if (opt.thread == self.id) {
                let user_id = opt.message.user;
                // remove the typing indicator
                self.remove_typing(user_id);
                // insert the message to the thread
                self.add_message(opt.message, update=true);

                // send the message seen notification
                self.seen();
                self.thread.seen[user_id] = self.message_l.length-1;
                self.update_seen();
            }
        },

        /* typing notification received */
        typing: function (opt) {
            let user_id = opt.user;
            if (opt.thread == self.id) {
                // add or remove typing indicator
                if (opt.clear) {
                    self.remove_typing(user_id);
                } else {
                    self.add_typing(user_id);
                }
            }
        },

        /* somebody liked a message */
        like: function (opt) {
            if (opt.thread == self.id) {
                let message = self.message_l[opt.message_idx];
                message.add_like(opt);
            }
        },

        /* somebody saw a message */
        seen: function (opt) {
            if (opt.thread == self.id) {
                let message = self.message_l[opt.message_idx];
                self.el.find(`img#${opt.user}`).remove();
                message.add_seen(opt.user);
            }
        }
    }

    /*
      If we don't have a thread ID (this is an unused 1:1 thread),
      we'll wait for the thread to be created and assign the thread id
    */
    if (!self.id) {
        self.handler.new_thread = function (thread) {
            if (self.user_id == thread.user.id) {
                self.id = thread.id;
            }
        }
    }

    self.init();
}
function chat_results (container, search) {
    var self = this;
    el.call(self, container);

    self.search = search.toLowerCase();

    // initialize
    self.init = function () {
        self.html = '<div id="results"></div>';
        self.add_to_page();

        let filtered_user_d = fp.filter_users(self.search, false);
        let filtered_thread_d = fp.filter_threads(self.search);
        for (let id in filtered_thread_d) {
            let thread = filtered_thread_d[id];
            if (thread.user) {
                filtered_thread_d[thread.user.id] = thread.user;
                delete filtered_thread_d[id];
            }
        }

        let thread_d = utility.merge(filtered_thread_d, filtered_user_d);
        for (let id in thread_d) {
            let user = thread_d[id];
            new chat_badge (self.el, null,  user);
        }
    }

    self.init();
}
function chat (container, id) {
    var self = this;
    el.call(self, container);

    self.badge_d = {};
    self.first = null;

    // initialize the chat
    self.init = function () {
        self.html = `
          <div id="chat">
            <div class="header">Chat</div>
            <div id="create_thread_btn">
              ${svg.plus}
            </div>
            <input type="search" placeholder="Search..."></input>
            <div id="results"></div>
          </div>`;

        self.add_to_page();

        self.create_btn = self.el.find('div#create_thread_btn');
        self.search_el = self.el.find('input');
        self.results_el = self.el.find('div#results');

        self.set_to_recent();
        self.init_handlers();
    }

    self.init_handlers = function () {
        // register with the api
        fp.api.register(self);

        // a thread is selected
        self.el.on("click", "div.thread_label", function () {
            let thread_id = $(this).attr("id");
            fp.set_hash("chat/" + thread_id);
        });

        // show search results when searching
        self.search_el.on("input", function(e) {
            let filter = $(this).val();
            if (filter) {
                new chat_results (self.results_el, filter);
            } else {
                self.set_to_recent();
            }
        })

        // select a search result
        self.el.on("click", "div.badge.thread", function () {
            let search = self.search_el.val();
            if (search) {
                self.search_el.val("");
                self.set_to_recent();
            }
        });

        // plus clicked, show create thread popup
        self.create_btn.on("click", function() {
            new create_thread();
        });
    }

    self.set_to_recent = function () {
        self.first = null;
        self.results_el.empty();

        let sorted_threads = Object.keys(fp.thread_d).sort(function(a, b) {
            return fp.thread_d[b].timestamp - fp.thread_d[a].timestamp;
        });

        for (var thread_id of sorted_threads) {
            let thread = fp.thread_d[thread_id];
            self.add_thread(thread);
        }
    }

    self.set_most_recent = function (thread) {
        let badge = self.badge_d[thread.id];
        if (self.first != badge) {
            badge.el.insertBefore(self.first.el);
            self.first = badge;
        }
    }


    /*
     * websocket handlers
     */
    self.handler = {
        /* The initial configuration is received */
        ui_config:  function (opt) {
            console.log(opt)
            self.user_d = opt.user_d || {};

            // initialize the user objects
            for (let id in self.user_d) {
                let user_cfg = self.user_d[id];
                self.user_d[id] = new user_object(user_cfg);
            }
            self.user = self.user_d[opt.user_id];

            // initialize the threads
            for (let id in opt.thread_d) {
                let thread_cfg = opt.thread_d[id];
                let thread = new thread_object (thread_cfg);
                self.thread_d[id] = thread;
                if (thread.user) {
                    self.user_thread_d[thread.user.id] = thread
                }
            }

            /* this is required for django CSRF handling */
            $.ajaxSetup({
                beforeSend: function(xhr, settings) {
                    if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {
                        // Only send the token to relative URLs i.e. locally.
                        xhr.setRequestHeader("X-CSRFToken", opt.csrf_token);
                    }
                }
            });

        /* somebody liked a message */
        like: function (opt) {
            let thread = fp.thread_d[opt.thread];
            thread.timestamp = opt.timestamp;
            self.set_most_recent(thread);
        },

        /* Somebody sent a message */
        message: function (opt) {
            let thread = fp.thread_d[opt.thread];
            thread.length++;
            thread.timestamp = opt.message.timestamp;
            // move to the top
            self.set_most_recent(thread);
            if (!thread.in_view()) {
                let badge = self.badge_d[thread.id];
                badge.el.addClass('unread');
            }
        },

        /* Somebody became active */
        active: function (opt) {
            let user = fp.user_d[opt.user_id];
            user.active = opt.active;
            $(`div#${user.id}.badge.thread`).toggleClass('active', opt.active);
        },

        /* Somebody saw our message */
        seen: function (opt) {
            let uid = opt.user;
            let thread = fp.thread_d[opt.thread];
            thread.seen[uid] = opt.message_idx;
        }
    }

    self.init();
}
function message (container, thread, config, idx, nest = false) {
    var self = this;
    let append = nest ? "append":"prepend";
    el.call(self, container, append);

    self.idx = idx;
    self.thread = thread;
    self.like_l = config.like_l || [];
    self.user = fp.user_d[config.user];
    self.thread_id = config.thread_id;
    self.me = Boolean(self.user == fp.user) ? "me":"";
    self.text = utility.emoticon_replace(config.text);
    self.timestamp = utility.getTimeString(config.timestamp);
    self.heart_img = utility.static_url("img/heart_outline.svg");
    self.heart_full_img = utility.static_url("img/heart.svg");

    self.init = function () {
        if (nest) {
            self.html = self.get_text_html();
        } else {
            self.html = `
                <div class="message_wrapper">`;
            if (self.me) {
                self.html += `<div class="me_bar"></div>`;
            }
            self.html += `
                  <img class="threadpic" src="${self.user.pic_url}">
                  <div class="name">${self.user.full_name}</div>`;
            self.html += self.get_text_html();
            self.html += `</div>`;

        }
        self.add_to_page();

        self.heart_el = self.el.find('div.heart');
        self.seen_el = self.el.find('div.seen');
        self.img_el = self.el.find('div.heart img');

        self.update_like();
        self.init_handlers();
    }

    self.get_text_html = function (text) {
        return `
          <div class="message_sub_wrapper">
            <div class="message">
              ${self.text}
              <div class="timestamp">${self.timestamp}</div>
              <div class="heart ${self.me ? "noclick":""}">
                <img src="${self.heart_img}" />
              </div>
            </div>
          <div class="seen"></div>
          </div>`;
    }

    self.update_like = function () {
        if (self.like_l.isEmpty()) {
            self.hide_like();
        } else {
            self.show_like();
        }
    }
    self.hide_like = function () {
        self.heart_el.removeClass("show");
        self.img_el.attr("src", self.heart_img);
    }
    self.show_like = function () {
        self.heart_el.addClass("show");
        self.img_el.attr("src", self.heart_full_img);
    }

    self.add_like = function (opt) {
        if (self.like_l.contains(opt.user)) {
            self.like_l.remove(opt.user);
        } else {
            self.like_l.push(opt.user);
        }
        self.update_like();
    }

    self.add_seen = function (user_id) {
        let user = fp.user_d[user_id];
        let img_url = user.pic_url;
        let name = user.full_name;
        self.seen_el.append(`<div class="seen_bubble">`+
                            `<img id="${user_id}" src="${img_url}">`+
                            `<span>Seen by ${name}</span>`+
                            `</div>`);
    }

    self.init_handlers = function () {
        /* emoji popup */
        if (self.user != fp.user) {
            self.el.on("click", "div.heart", function (e) {
                // send to everyone else
                fp.api.query({
                    'chat.send_like': {
                        thread_id: self.thread.id,
                        message_idx: self.idx,
                    }
                });
                return false;
            });
        }
    }

    self.init();
}
function chat_badge (container, thread, user = null) {
    var self = this;
    el.call(self, container, true);

    self.form_cfg = {
        title: "Create a new thread",
        btn_label: "Create",
        handler: function (callback) {
            let value = self.form.value();
            let data = {data: JSON.stringify(value)};
            let url = utility.api_url("create_thread");
            modal.close();
            $.post(url, data)
                .fail(function(response, status) {
                    $.unblockUI();
                    modal.alert("Error creating thread!");
                })
                .done(function(response, status) {
                    self.done(response);
                })
        },
        inputs: [
            {
                type: "input",
                label: "Thread Label",
                id: "label",
                placeholder: "Give a label to describe this thread",
                required: true,
                width: "100%",
            },
            {
                type: "select_users",
                required: true,
                label: "Thread Members",
                id: "members",
                width: "100%",
            },
        ]
    }

    self.unread = !thread.in_view() && thread.seen[fp.user.id] < thread.length-1;

    self.init = function () {
        let unread_class = self.unread ? "unread":"";
        let active_class = self.user.active ? "active":"";

        self.html = `
            <div class="badge thread ${active_class} ${unread_class}" id="${self.user.id}">
              <img class="pic" src="${self.pic_url}">
              <svg class="active" height="10" width="10">
                <circle cx="5" cy="5" r="5"/>
              </svg>
              <div class="details">
                <span class="name">${self.label}</span>
                <svg class="unread" height="8" width="8">
                  <circle cx="4" cy="4" r="4"/>
                </svg>
              </div>
            </div>`;

        self.add_to_page();
        self.init_handlers();
    }


    self.done = function (response) {
        console.log(response);
        fp.set_hash("chat/" + response.id);
        $.unblockUI();
    }

    self.init()
}
function family_invite (container, config = {}, append = true) {
    var self = this;
    form_el.call(self, container, config, append);

    // initialize the badge
    self.init = function () {
        self.options = self.relationship_options();

        self.html = `
          <label class="form" style="width: ${self.width}">
            ${self.label}${self.asterisk}<br>
            <select name="${self.id}">`;

        for (let opt of self.options) {
            let selected = "";
            if (opt.indexOf('[') == 0) {
                let label = opt.replace('[', "").replace(']', "");
                self.html += `<optgroup label="${label}">`;
                //self.html += `<option disabled>${label}</option>`;
                continue;
            }
            if (opt == self.value) {
                selected = "selected";
            }
            self.html += `<option value="${opt}" ${selected}>${opt}</option>`;
        }
        self.html += '</label>';

        self.add_to_page();
        self.init_handlers();
    }

    self.relationship_options = function () {
        let user_l = [''];
        for (let member of fp.user.family) {
            if (!member.user_id) {
                let username = member.name;
                user_l.push(`${member.type} (${username})`);
            }
        }
        user_l.push("[New]");
        user_l = utility.merge(user_l, fp.user.possible_relationships());
        return user_l;
    }

    // initialize handlers
    self.init_handlers = function () {
        /* save value */
        self.el.on("input", function (e) {
            let val = self.el.find('select').val();
            if (val.includes('(')) {
                let [type, name] = val.match(/(\w+) \(([\w\s]+)\)/).slice(1,3);
                self.value = {
                    type: type,
                    name: name,
                }
            } else {
                self.value = {
                    type: val
                }
            }
        })
    }
}
function select (container, config = {}, append = true) {
    var self = this;
    form_el.call(self, container, config, append);

    // initialize config
    if (typeof config.options === 'function') {
        self.options = config.options();
    } else {
        self.options = config.options;
    }

    // initialize the badge
    self.init = function () {
        self.html = `
          <label class="form" style="width: ${self.width}">
            ${self.label}${self.asterisk}<br>
            <select name="${self.id}">`;

        for (let opt of self.options) {
            let selected = "";
            if (opt == self.value) {
                selected = "selected";
            }
            self.html += `<option value="${opt}" ${selected}>${opt}</option>`;
        }
        self.html += '</label>';

        self.add_to_page();
        self.init_handlers();
    }

    // initialize handlers
    self.init_handlers = function () {
        /* save value */
        self.el.on("input", function (e) {
            self.value = self.el.find('select').val();
        })
    }
}
function family_row (container, config = {}, index, taken,  append = true) {
    var self = this;
    el.call(self, container, append);


    // initialize the element
    self.init = function () {
        let placeholder_str = self.placeholder ? `placeholder="${self.placeholder}"` : "";

        self.html = `
          <label class="form ${self.hidden}" style="width: ${self.width}" page="${self.page}">
            ${self.label}${self.asterisk}
            <input ${placeholder_str} name="${self.id}" value="${self.value}" />
          </label>`;

        self.add_to_page();
        self.init_handlers();
    }

    // initialize handlers
    self.init_handlers = function () {
        /* save value */
        self.el.on("input", function (e) {
            self.value = self.el.find('input').val();
            if (!self.value && self.starting_value) {
                self.value = self.starting_value;
            }
        })
    }
}
function select_users (container, config, append = true) {
    var self = this;
    form_el.call(self, container, config, append);

    self.temp_value = self.value || [fp.user.id];
    self.selected_d = {};

    // initialize the element
    self.init = function () {
        self.html = `
          <div class="select_users_wrapper">
            <label class="form select_users" style="width: ${self.width}">
              ${self.label}${self.asterisk}<br>
              <input type="search" placeholder="Search users..."></input>
              <div id="results_wrapper"></div>
            </label>
            <div id="selected" class="show_scrollbar" hidden></div>
          </div>`;

        self.add_to_page();
        self.label_el = self.el.find('label')
        self.search_el = self.el.find('input')
        self.results_el = self.el.find('div#results_wrapper')
        self.selected_el = self.el.find('div#selected');

        for (let user_id of self.temp_value) {
            if (user_id != fp.user.id) {
                self.add_user(user_id, true);
            }
        }

        self.init_handlers();
    }

    // initialize event handlers
    self.init_handlers = function () {
        /* on search input */
        self.search_el.on("input", function(e) {
            let filter = $(this).val();
            if (filter) {
                new select_users_results (self.results_el, filter, self.temp_value);
            } else {
                self.results_el.empty();
            }
        })

        /* hide the results when clicking out of the search bar */
        self.el.on("focusin focusout", function (e) {
            self.results_el.toggle(e.type == "focusin");
        })
        /* clicking on results shouldn't change focus */
        self.results_el.on("mousedown", function (e) {
            e.preventDefault();
        });

        /* enter pressed */
        self.search_el.on('keypress', function(e) {
            if (e.which == 13) {
                if (self.results_el.find('div.badge').length == 1) {
                    self.results_el.find('div.badge').first().trigger('click');
                }
            }
        })

        /* member clicked */
        self.results_el.on("click", "div.badge", function (e) {
            // find the user id from the element
            let user_id = $(this).attr("id");
            // add user to the selected
            self.add_user(user_id);

            // we're done with the search, clear everything
            self.results_el.empty();
            self.search_el.val("");
        })

        /* member removed */
        self.selected_el.on("click", "span.remove", function (e) {
            // find the user id from the element
            let user_id = $(this).closest('div.badge').attr("id");
            let user = fp.user_d[user_id];
            // remove the element from the page
            self.selected_d[user_id].el.remove();
            // remove the object from our memory
            delete self.selected_d[user_id];
            // remove user from the form value
            self.temp_value.remove(user.id);
            self.update();
        })
    }

    self.add_user = function (user_id, init = false) {
        // find the user object
        let user = fp.user_d[user_id];
        // add the user id to the form value
        if (!init) {
            self.temp_value.push(user.id);
            self.update();
        }
        // add the visual element (and remember it)
        self.selected_d[user.id] = new badge (self.selected_el, user, "selected", append = true);
    }

    // update the input
    self.update = function () {
        if (self.temp_value.length > 1) {
            self.value = self.temp_value;
            self.selected_el.show();
        } else {
            self.value = null;
            self.selected_el.hide();
        }
        self.el.trigger("input");
    }
}

function select_users_results (container, search, exclude) {
    var self = this;
    el.call(self, container);

    self.search = search.toLowerCase();

    // initialize
    self.init = function () {
        self.html = '<div id="results"></div>';
        self.add_to_page();

        let filtered_user_d = fp.filter_users(self.search, true);

        for (let id in filtered_user_d) {
            if (!exclude.includes(id)) {
                let user = filtered_user_d[id];
                new badge (self.el, user, "select", append = true);
            }
        }
    }

    self.init();
}
function family_row (container, config = {}, index, taken,  append = true) {
    var self = this;
    el.call(self, container, append);

    // init config
    self.user_id = config.user_id;
    self.user = null;
    if (self.user_id) {
        self.user = fp.user_d[self.user_id]
        self.name = `${self.user.full_name} (${self.user.email})`;
    } else {
        self.name = config.name || "";
    }
    self.taken = taken || [];
    self.type = config.type || "";

    self.disabled = self.name ? "":"disabled";
    self.index = index;
    self.value = config.value || "";

    // initialize the element
    self.init = function () {
        self.html = `
          <tr index=${self.index}><td>
            <input value="${self.name}" />
            <div class="results"></div>
          </td>
          <td>
          <select ${self.disabled}>`;

        self.html += `</select></td></tr>`;

        self.add_to_page();
        self.results_el = self.el.find("div.results");
        self.type_el = self.el.find("select");
        self.input_el = self.el.find("input");
        self.init_handlers();
        if (self.name) {
            self.set_type_options();
        }
    }

    self.set_type_options = function () {
        let html = "";

        let rel_l = self.get_type_options();

        for (var rel of rel_l) {
            let selected = (self.type == rel) ? "selected":"";
            html += `<option value="${rel}" ${selected}>${rel}</option>`;
        }

        if (self.type) {
            self.taken.add(self.type);
        }

        self.type_el.html(html);

    }

    self.get_type_options = function () {
        let my_gender = fp.user.gender;

        rel_l = [''];
        for (var type_label in cfg.relationship_types) {
            let type_details = cfg.relationship_types[type_label];
            // make sure we're the right gender
            if (type_details.required_gender && fp.user.gender != type_details.required_gender) {
                continue;
            }

            // make sure this isn't a unique relationship that's already set
            if (self.type != type_label && type_details.unique && self.taken.has(type_label)) {
                continue;
            }

            if (self.user) {
                // make sure the type has the right gender
                if (type_details.gender && self.user.gender != type_details.gender) {
                    continue;
                }
            }
            rel_l.push(type_label);
        }

        return rel_l;
    }

    // initialize handlers
    self.init_handlers = function () {

        /* save name value */
        self.input_el.on("input", function (e) {
            self.name = $(this).val();
            self.user = self.user_id = null;

            let idx = $(this).closest("tr").attr("index");

            /* enable the relationship selector */
            self.type_el.prop("disabled", !Boolean(self.name));

            /* show the search results */
            if (self.name) {
                /* add the type options */
                //self.set_type_options();
                self.results_el.empty().show();
                let filtered_user_d = fp.filter_users(self.name, false);
                for (let id in filtered_user_d) {
                    let user = filtered_user_d[id];
                    new badge (self.results_el, user, "family", append = true);
                }
            } else {
                self.results_el.hide();
            }
        })

        /* member clicked */
        self.results_el.on("click", "div.badge", function (e) {
            self.user_id = $(this).attr("id");
            self.user = fp.user_d[self.user_id];

            // store the results
            self.input_el.val(`${self.user.full_name} (${self.user.email})`);
            $(this).trigger("input");

            // we're done with the search
            self.results_el.hide();

            // update the type selector
            self.set_type_options();
        })

        /* type selected */
        self.type_el.on("input", function (e) {
            // remove from the taken relationships
            if (self.type) {
                self.taken.delete(self.type);
            }
            self.type = $(this).val();
            // add to the taken relationships
            if (self.type) {
                self.taken.add(self.type);
            }
            $(this).toggleClass("error", !Boolean(self.type))
        })
    }

    self.init();
}
function password (container, config = {}, append = true) {
    var self = this;
    form_el.call(self, container, config, append);

    // init config
    self.label = config.label || "Password";

    // initialize the element
    self.init = function () {
        self.html = `<span><label class="form" style="width: ${self.width}">`+
            `${self.label}${self.asterisk}`+
            `<br><input type="password" name="${self.id}" /></label>`+
            `<label class="form" style="width: ${self.width}">`+
            `Confirm ${self.label}${self.asterisk}`+
            `<br><input type="password" name="${self.id}" /></label></span>`;

        self.add_to_page();
        self.init_handlers();
    }

    // initialize handlers
    self.init_handlers = function () {
        /* watch for input */
        self.el.on("input", function (e) {
            let valid = self.validate()
            // underline red
            if (valid) {
                self.value = self.el.find('input').val();
                $('input', self.el).removeClass("error");
            } else {
                self.value = "";
                $('input', self.el).addClass("error");
            }
        })
    }

    // validate the input
    self.validate = function () {
        var pw_l = [];
        $('input:password', self.el).each(function() {
            pw_l.push($(this).val());
        })
        return Boolean(pw_l[0] != "" && pw_l[0] == pw_l[1]);
    }
}
function profile_pic_uploader (container, config, append = true) {
    var self = this;
    form_el.call(self, container, config, append);

    // init config
    self.avatar = utility.static_url('profile_pics/' + (self.value || "avatar.svg"));

    // initialize the element
    self.init = function () {
        self.html += '<div class="prof_pic_uploader">'+
            '<img id="profile_pic" src="'+self.avatar+'"/>';
        self.html += '<label class="button">'+
            '<input id="upload_pic" type="file" accept="image/png, image/jpeg">'+
            'Upload Profile Image</label>';
        self.html += '</div>';

        self.add_to_page();
        self.init_handlers();
    }

    // initialize handlers
    self.init_handlers = function () {
        // clear the input when opening
        self.el.on("click", "input#upload_pic", function(e) {
            $(this).val('');
        })

        // Handle input
        self.el.on("input", "input#upload_pic", function(e) {
            // get the file object
            let file = e.target.files[0];
            if (file) {

                // create a file reader
                const reader = new FileReader();
                reader.addEventListener('load', (event) => {
                    // get the file url
                    let url = event.target.result;

                    // open the popup
                    modal.open('<div id="cropper"></div><div width="100%">'+
                               '<button id="cropper_done">Done</button></div>');

                    // fill with croppie
                    var el = document.getElementById('cropper');
                    var cropper = new Croppie (el, {
                        viewport: { width: 300, height: 300, type: 'circle' },
                        url: url
                    })

                    // on done
                    $('button#cropper_done').on("click", function(e) {
                        cropper.result('blob', 'viewport', 'jpeg').then(function(blob) {
                            // remember the data
                            self.value = blob;
                            // update the UI
                            var blobUrl = URL.createObjectURL(blob);
                            $('img#profile_pic').attr("src",blobUrl);
                            // close the modal
                            modal.close();
                        });
                    })
                });
                reader.readAsDataURL(file);
            }
        })
    }
}
function phone (container, config = {}, append = true) {
    var self = this;
    input.call(self, container, config, append);

    // initialize the config
    self.placeholder = self.placeholder || "xxx-xxx-xxxx";

    // initialize handlers
    self.init_handlers = function () {
        self.el.on("input", "input", function(e) {
            let val = $(this).val().replace(/[^\d]/g, '');

            // remove the 1
            if (val.startsWith('1')) {
                val = val.slice(1);
            }

            // trim to 10
            if (val.length > 10) {
                val = val.slice(0,10);
            }

            // add dashes
            if (val.length > 6) {
                val = val.slice(0,3) + '-' + val.slice(3,6) + '-' + val.slice(6);
            } else if (val.length > 3) {
                val = val.slice(0,3) + '-' + val.slice(3);
            }

            $(this).val(val);

            let valid = self.validate(val);

            // underline red
            if (!val && self.starting_value) {
                self.value = self.starting_value;
                $('input', self.el).removeClass("error");
            } else if (valid) {
                self.value = self.el.find('input').val();
                $('input', self.el).removeClass("error");
            } else {
                self.value = "";
                $('input', self.el).addClass("error");
            }
        });
    }

    // validate the input
    self.validate = function (val) {
        val = val.replace(/[^\d]/g, '');
        return Boolean(val.length == 10);
    }
}
function family (container, config = {}, append = true) {
    var self = this;
    form_el.call(self, container, config, append);

    self.value_draft = utility.deep_copy(self.value) || [];
    self.value_draft.push({});
    self.taken = new Set();
    self.row_l = [];

    // initialize the element
    self.init = function () {

        self.html = `
          <table id="family_members" class="form ${self.hidden}" page="${self.page}">
            <thead><tr><th>Name</th><th>Relationship</th></tr></thead>
          </table>`;

        self.add_to_page();
        self.init_handlers();

        // add the rows
        for (let usr of self.value_draft) {
            if (!usr.user_id || fp.user_d[usr.user_id]) {
                self.row_l.push(new family_row(self.el, usr, self.row_l.length, self.taken, true));
            }
        }
    }

    // initialize handlers
    self.init_handlers = function () {

        self.el.on("input", function () {
            self.value = [];
            for (let row of self.row_l) {
                row.set_type_options();
                if (row.name && row.type) {
                    self.value.push({
                        name: row.name,
                        type: row.type,
                        user_id: row.user_id,
                    })
                }
            }

            if (self.value.length == self.row_l.length) {
                self.row_l.push(new family_row(self.el, {}, self.row_l.length, self.taken, true))
            }
        });
    }
}
function select_users (container, config, append = true) {
    var self = this;
    form_el.call(self, container, config, append);

    self.temp_value = self.value || [fp.user.id];
    self.selected_d = {};

    // initialize the element
    self.init = function () {
        self.html = `
          <div class="select_users_wrapper">
            <label class="form select_users" style="width: ${self.width}">
              ${self.label}${self.asterisk}<br>
              <input type="search" placeholder="Search users..."></input>
              <div id="results_wrapper"></div>
            </label>
            <div id="selected" class="show_scrollbar" hidden></div>
          </div>`;

        self.add_to_page();
        self.label_el = self.el.find('label')
        self.search_el = self.el.find('input')
        self.results_el = self.el.find('div#results_wrapper')
        self.selected_el = self.el.find('div#selected');

        for (let user_id of self.temp_value) {
            if (user_id != fp.user.id) {
                self.add_user(user_id, true);
            }
        }

        self.init_handlers();
    }

    // initialize event handlers
    self.init_handlers = function () {
        /* on search input */
        self.search_el.on("input", function(e) {
            let filter = $(this).val();
            if (filter) {
                new select_users_results (self.results_el, filter, self.temp_value);
            } else {
                self.results_el.empty();
            }
        })

        /* hide the results when clicking out of the search bar */
        self.el.on("focusin focusout", function (e) {
            self.results_el.toggle(e.type == "focusin");
        })
        /* clicking on results shouldn't change focus */
        self.results_el.on("mousedown", function (e) {
            e.preventDefault();
        });

        /* enter pressed */
        self.search_el.on('keypress', function(e) {
            if (e.which == 13) {
                if (self.results_el.find('div.badge').length == 1) {
                    self.results_el.find('div.badge').first().trigger('click');
                }
            }
        })

        /* member clicked */
        self.results_el.on("click", "div.badge", function (e) {
            // find the user id from the element
            let user_id = $(this).attr("id");
            // add user to the selected
            self.add_user(user_id);

            // we're done with the search, clear everything
            self.results_el.empty();
            self.search_el.val("");
        })

        /* member removed */
        self.selected_el.on("click", "span.remove", function (e) {
            // find the user id from the element
            let user_id = $(this).closest('div.badge').attr("id");
            let user = fp.user_d[user_id];
            // remove the element from the page
            self.selected_d[user_id].el.remove();
            // remove the object from our memory
            delete self.selected_d[user_id];
            // remove user from the form value
            self.temp_value.remove(user.id);
            self.update();
        })
    }

    self.add_user = function (user_id, init = false) {
        // find the user object
        let user = fp.user_d[user_id];
        // add the user id to the form value
        if (!init) {
            self.temp_value.push(user.id);
            self.update();
        }
        // add the visual element (and remember it)
        self.selected_d[user.id] = new badge (self.selected_el, user, "selected", append = true);
    }

    // update the input
    self.update = function () {
        if (self.temp_value.length > 1) {
            self.value = self.temp_value;
            self.selected_el.show();
        } else {
            self.value = null;
            self.selected_el.hide();
        }
        self.el.trigger("input");
    }
}

function select_users_results (container, search, exclude) {
    var self = this;
    el.call(self, container);

    self.search = search.toLowerCase();

    // initialize
    self.init = function () {
        self.html = '<div id="results"></div>';
        self.add_to_page();

        let filtered_user_d = fp.filter_users(self.search, true);

        for (let id in filtered_user_d) {
            if (!exclude.includes(id)) {
                let user = filtered_user_d[id];
                new badge (self.el, user, "select", append = true);
            }
        }
    }

    self.init();
}
function form_el (container, config, append) {
    var self = this;
    el.call(self, container, append);

    // read config
    self.label = config.label || "";
    self.id = config.id || self.label.lower().replace(/ /g,"_");
    self.width = config.width || "50%";
    self.width = `calc(${self.width} - 28px)`;
    self.hidden = config.hidden ? "hidden":"";
    self.required = config.required || false;
    self.asterisk = self.required ? "*":"";
    self.placeholder = config.placeholder || "";
    self.value = config.value || "";
    self.page = config.page || 1;

    if (self.required && self.value) {
        self.starting_value = self.placeholder = self.value;
        self.asterisk = "";
    }
}

function button (container, config = {}, append = false) {
    var self = this;
    form_el.call(self, container, config, append);

    // read options
    self.disabled = config.disabled ? "disabled" : "";

    // initialize
    self.init = function () {
        self.html += `<button id="${self.id}" class="big ${self.hidden}"`+
            `${self.disabled}>${self.label}</button>`;

        // add to the page
        self.add_to_page();
    }

    self.init();
}
function birthday (container, config = {}, append = true) {
    var self = this;
    input.call(self, container, config, append);

    // initialize the config
    self.placeholder = self.placeholder || "xx/xx/xxxx";

    // initialize handlers
    self.init_handlers = function () {
        /* save the value */
        self.el.on("input", "input", function(e) {
            let val = $(this).val().replace(/[^\d]/g, '');

            // trim to 10
            if (val.length > 8) {
                val = val.slice(0,8);
            }

            // add dashes
            if (val.length > 4) {
                val = val.slice(0,2) + '/' + val.slice(2,4) + '/' + val.slice(4);
            } else if (val.length > 2) {
                val = val.slice(0,2) + '/' + val.slice(2);
            }

            $(this).val(val);

            let valid = self.validate(val);

            // underline red
            if (valid) {
                self.value = self.el.find('input').val();
                $('input', self.el).removeClass("error");
            } else {
                self.value = "";
                $('input', self.el).addClass("error");
            }
        });
    }

    // validate the input
    self.validate = function (val) {
        val = val.replace(/[^\d]/g, '');
        return Boolean(val.length == 8);
    }
}
function input (container, config = {}, append = true) {
    var self = this;
    form_el.call(self, container, config, append);

    // initialize the element
    self.init = function () {
        let placeholder_str = self.placeholder ? `placeholder="${self.placeholder}"` : "";

        self.html = `
          <label class="form ${self.hidden}" style="width: ${self.width}" page="${self.page}">
            ${self.label}${self.asterisk}
            <input ${placeholder_str} name="${self.id}" value="${self.value}" />
          </label>`;

        self.add_to_page();
        self.init_handlers();
    }

    // initialize handlers
    self.init_handlers = function () {
        /* save value */
        self.el.on("input", function (e) {
            self.value = self.el.find('input').val();
            if (!self.value && self.starting_value) {
                self.value = self.starting_value;
            }
        })
    }
}
function text (container, config = {}, append = true) {
    var self = this;
    // set defaults
    config.width = config.width || "100%";
    form_el.call(self, container, config, append);

    // read options
    self.list = config.list || false;

    // initialize the element
    self.init = function () {
        let starting_value = self.value;
        if (starting_value && self.list) {
            try {
                starting_value = self.value.join("\n");
            } catch {}
        }

        self.html = `
          <label class="form ${self.hidden}" style="width: ${self.width}" page="${self.page}">
            ${self.label}${self.asterisk}<br>
            <div class="textarea" id="${self.id}" contenteditable>${starting_value}</div>
          </label>`;

        self.add_to_page();
        self.init_handlers();
    }

    // initialize handlers
    self.init_handlers = function () {
        /* save value */
        self.el.on("input", function (e) {
            let val = self.el.find('div').text();
            if (self.list) {
                val = val.split(/\r?\n/).filter(n => n);
            }
            self.value = val;
        })

        /* pasting into contenteditable div requires special handling :/ */
        self.el.on("paste", "div.textarea", function (e) {
            e.preventDefault();
            var text = e.originalEvent.clipboardData.getData('text/plain');
            $(this).text(text);
            utility.placeCursorAtEnd(this);
            $(this).trigger("input");
        })
    }
}
function new_user (container, id, append = false) {
    var self = this;
    el.call(self, container, append);

    self.invite_id = id;
    self.form = null;
    self.form_cfg = {
        title: "Account Setup",
        message: "Your request has been submitted!",
        handler: function (callback) {
            let value = self.form.value();
            let pic = value.profile_picture;
            delete value.profile_picture;

            var fd = new FormData();
            fd.append("profile_picture", pic);
            fd.append("details", JSON.stringify(value));

            let url = utility.api_url("create_user", self.invite_id);
            $.ajax({
                url: url,
                data: fd,
                processData: false,
                contentType: false,
                type: 'POST',
                success: function(data){
                    window.location.href = "/#setup";
                },
                error: function (request, status, error) {
                    $.unblockUI();
                    modal.alert(request.responseText);
                }
            });
        },
        inputs: [
            {
                type: "profile_pic_uploader",
                label: "Profile Picture"
            },
            {
                type: "help",
                message: "Your profile picture should help identify you. Please use a picture of your face!",
            },
            {
                type: "divider",
                label: "Basic"
            },
            {
                type: "help",
                message: "This is required contact/directory information.",
            },
            {
                type: "input",
                label: "Email",
                width: "50%",
                required: true,
            },
            {
                type: "select",
                label: "Church Membership Status",
                id: 'membership_status',
                width: "50%",
                required: true,
                options: ['Member', 'Regular Attender']
            },
            {
                type: "password",
                label: "Password",
                width: '50%',
                required: true,
            },
            {
                type: "input",
                label: "First Name",
                required: true,
            },
            {
                type: "input",
                label: "Last Name",
                required: true,
            },
            {
                type: "input",
                label: "Home Address",
                id: "address",
                width: "50%",
                required: true,
            },
            {
                type: "input",
                label: "City",
                width: "50%",
                required: true,
            },
            {
                type: "select",
                label: "State",
                width: "50%",
                required: true,
                options: [
                    "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL",
	            "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME",
                    "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH",
                    "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI",
                    "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"
                ]
            },
            {
                type: "phone",
                label: "Phone Number",
                id: "phone",
                width: "50%",
                required: true,
            },
            {
                type: "select",
                label: "Gender",
                width: "50%",
                required: true,
                options: ['Male', 'Female'],
            },
            {
                type: "birthday",
                label: "Birthday",
                width: "50%",
                required: true,
            },
        ]
    }

    // initialize
    self.init = function () {
        self.form = new form (self.container, self.form_cfg, true);
    }

    self.init();
}
function settings (container, append = false) {
    var self = this;
    el.call(self, container, append);

    self.form = null;
    self.form_cfg = {
        title: "Edit Profile",
        message: "Your request has been submitted!",
        wait_text: "Saving...",
        btn_label: "Save",
        handler: function (callback) {
            let value = self.form.value();
            let pic = value.profile_picture;
            delete value.profile_picture;

            var fd = new FormData();
            fd.append("profile_picture", pic);
            fd.append("details", JSON.stringify(value));

            let url = utility.api_url("update_user", fp.user.id);
            $.ajax({
                url: url,
                data: fd,
                processData: false,
                contentType: false,
                type: 'POST',
                success: function(data){
                    utility.unblockUI();
                }
            });
        },
        inputs: [
            {
                type: "profile_pic_uploader",
                label: "Profile Picture",
                value: fp.user.pic,
            },
            {
                type: "help",
                message: "Your profile picture should help identify you. Please use a picture of your face!",
            },
            {
                type: "divider",
                label: "Basic"
            },
            {
                type: "help",
                message: "This is required contact/directory information.",
            },
            {
                type: "input",
                label: "Email",
                width: "50%",
                required: true,
                value: fp.user.email,
            },
            {
                type: "select",
                label: "Church Membership Status",
                id: 'membership_status',
                width: "50%",
                required: true,
                options: ['Member', 'Regular Attender'],
                value: fp.user.membership_status
            },
            {
                type: "input",
                label: "First Name",
                required: true,
                value: fp.user.first_name,
            },
            {
                type: "input",
                label: "Last Name",
                required: true,
                value: fp.user.last_name,
            },
            {
                type: "input",
                label: "Home Address",
                id: "address",
                width: "50%",
                required: true,
                value: fp.user.address,
            },
            {
                type: "phone",
                label: "Phone Number",
                id: "phone",
                width: "50%",
                required: true,
                value: fp.user.phone,
            },
            {
                type: "select",
                label: "Gender",
                width: "50%",
                required: true,
                options: ['Male', 'Female'],
                value: fp.user.gender,
            },
            {
                type: "birthday",
                label: "Birthday",
                width: "50%",
                required: true,
                value: fp.user.birthday,
            },
            {
                type: "divider",
                label: "About Me"
            },
            {
                type: "help",
                message: "Here you can add a bit more information about yourself.",
            },
            {
                type: "text",
                list: true,
                label: "Occupations / Skills / Passions (one per line)",
                id: "skills",
                width: "100%",
                value: fp.user.skills,
            },
            {
                type: "text",
                label: "About Me",
                id: "about",
                width: "100%",
                value: fp.user.about,
            },
            {
                type: "divider",
                label: "Family",
            },
            {
                type: "help",
                message: "Adding family members will help to others to understand your household. If you add children, other users will be able to search for them and find your account. If children create accounts, then parents will always be able to access those accounts.",
            },
            {
                type: "family",
                label: "Family Members",
                id: "family",
                width: "100%",
                value: fp.user.family,
            },
        ]
    }

    // initialize
    self.init = function () {
        // add to the page
        self.form = new form (self.container, self.form_cfg);
    }

    self.init();
}
function form (container, config, append = false) {
    var self = this;
    el.call(self, container, append);

    self.inputs = config.inputs;
    self.handler = config.handler;
    self.message = config.message;
    self.btn_label = config.btn_label || "Submit";
    self.page = 1;
    self.page_count = 1;
    self.wait_text = config.wait_text || "Please wait...";
    self.valid = false;
    self.form_l = [];

    // initialize
    self.init = function () {
        // add the title
        if (config.title) {
            self.html += '<h1>'+config.title+'</h1>';
        }

        self.html += '<div class="form"></div>';

        self.add_to_page();
        self.init_handlers();

        /* add form elements */
        for (let x of self.inputs) {
            x.hidden = Boolean(self.page != self.page_count) ? "hidden":"";
            x.page = self.page_count;

            switch (x.type) {
            case "help":
                self.el.append(`<div class="form card ${x.hidden}" page="${x.page}">${x.message}</div>`);
                break;
            case "divider":
                self.el.append(`<div class="form divider ${x.hidden}" page="${x.page}">`+
                               `<span>${x.label}</span></div>`);
                break;
            case "break":
                self.page_count++;
                break;
            default:
                var el_constructor = (eval(x.type));
                var el = new el_constructor(self.el, x, true);
                el.init();
                self.form_l.push(el);
            }
        }

        self.el.append("<div></div>");

        /* add buttons */
        let buttons = [];

        // next/back
        if (self.page_count > 1) {
            buttons.push({
                label: "Back",
                hidden: "hidden",
            })
            buttons.push({
                label: "Next",
                hidden: "",
                disabled: true,
            })
        }

        // submit
        buttons.push({
            label: self.btn_label,
            id: "submit",
            disabled: true,
            hidden: self.page_count > 1 ? "hidden" : ""
        });

        // add the buttons to the page
        for (let btn of buttons) {
            new button (self.el, btn, true);
        }

        // focus on the first element
        self.el.find("input, select").first().focus();
    }

    // initialize handlers
    self.init_handlers = function () {
        /* verify that required inputs are there */
        self.el.on("input", function (e) {
            self.validate();
        });

        /* next button click */
        self.el.on("click", "button#next", function (e) {
            self.page++;
            self.update();
        })

        /* back button click */
        self.el.on("click", "button#back", function (e) {
            self.page--;
            self.update()
        })

        /* submit the new user */
        self.el.on("click", "button#submit", function (e) {
            utility.blockUI(self.wait_text);
            self.handler(function() {
                $('#content').html('<div class="form_submitted">'+self.message+'</div>')
                $.unblockUI();
            });
        })
    }

    // validate the input
    self.validate = function () {
        self.valid = true;
        for (let el of self.form_l) {
            if (el.required && !el.value) {
                self.valid = false;
                break;
            }
        }

        self.el.find('button#submit, button#next').prop("disabled", !self.valid);
    }

    // get the form value as an object
    self.value = function () {
        var res_l = {};
        for (let el of self.form_l) {
            if (el.value) {
                res_l[el.id] = el.value;
            }
        }
        return res_l;
    }

    // update the form (hidden elements etc)
    self.update = function () {
        // hide/show elements
        $('.form[page='+self.page+']', self.el).removeClass("hidden");
        $('.form[page!='+self.page+']', self.el).addClass("hidden");

        // hide/show buttons
        $('button#back', self.el).toggleClass("hidden", self.page == 1);
        $('button#next', self.el).toggleClass("hidden", self.page == self.page_count);
        $('button#submit', self.el).toggleClass("hidden", self.page < self.page_count);
    }

    self.init();
    self.validate();
}
function create_thread () {
    var self = this;
    // create the modal container
    modal.open(`<div id="create_thread"></div>`,
               {overflow: "auto"});
    let container = $(`div#create_thread`);

    el.call(self, container, true);

    self.form_cfg = {
        title: "Create a new thread",
        btn_label: "Create",
        handler: function (callback) {
            let value = self.form.value();
            let data = {data: JSON.stringify(value)};
            let url = utility.api_url("create_thread");

            $.post(url, data)
                .fail(function(response, status) {
                    $.unblockUI();
                    modal.alert("Error creating thread!");
                })
                .done(function(response, status) {
                    self.done(response);
                })
        },
        inputs: [
            {
                type: "input",
                label: "Thread Label",
                placeholder: "Give a label to describe this thread",
                required: true,
                width: "100%",
            },
            {
                type: "select_users",
                required: true,
                label: "Thread Members",
                width: "100%",
            },
        ]
    }

    // initialize
    self.init = function () {
        self.form = new form (self.container, self.form_cfg);
    }

    self.done = function () {
        console.log(response);
        $.unblockUI();
    }

    self.init();
}
function invite_user (container, append = false) {
    var self = this;
    el.call(self, container, append);

    self.form = null;
    self.form_cfg = {
        title: "Create an invite link",
        message: "Invite sent!",
        btn_label: "Create Invite",
        handler: function (callback) {
            let value = self.form.value();
            let data = {data: JSON.stringify(value)};
            let url = utility.api_url("invite_user");

            $.post(url, data)
                .fail(function(response, status) {
                    $.unblockUI();
                    modal.alert("User already exists!");
                })
                .done(function(response, status) {
                    self.link = window.location.origin + root + response.link;
                    self.done();
                })
        },
        inputs: [
            {
                type: "help",
                message: "Provide an email address if you'd like to send an invite email.",
            },
            {
                type: "input",
                label: "Email",
                width: "60%",
            },
            {
                type: "help",
                message: "You can automatically link the new member into your household.",
            },
            {
                type: "family_invite",
                label: "Household Link",
                id: 'family',
                width: "60%",
            },
        ]
    }

    // initialize
    self.init = function () {
        self.form = new form (self.container, self.form_cfg);
    }

    self.done = function () {
        let html = `<div class="form_submitted">Invite sent!</div>
                    <div id="invite_sent">Share this link...<br><a href="${self.link}">${self.link}</a></div>`;
        $('#content').html(html);
        $.unblockUI();
    }

    self.init();
}
function user_settings (container, id, append = false) {
    var self = this;
    self.container = container;
    self.el = null;
    self.html = "";
    self.user_id = id;
    self.form = null;
    self.form_cfg = {
        message: "Your request has been submitted!",
        handler: function (callback) {
            let value = self.form.value();
            let pic = value.profile_picture;
            delete value.profile_picture;
            console.log(value);

            var fd = new FormData();
            fd.append("profile_picture", pic);
            fd.append("details", JSON.stringify(value));

            let url = utility.api_url("user_activate");
            $.ajax({
                url: url,
                data: fd,
                processData: false,
                contentType: false,
                type: 'POST',
                success: function(data){
                    callback();
                },
                error: function (request, status, error) {
                    $.unblockUI();
                    modal.alert(request.responseText);
                }
            });
        },
        inputs: [
            {
                type: "profile_pic_uploader",
                label: "Profile Picture"
            },
            {
                type: "input",
                label: "Email",
                width: "50%",
                required: true,
            },
            {
                type: "select",
                label: "Church Membership Status",
                id: 'membership_status',
                width: "50%",
                required: true,
                options: ['Member', 'Regular Attender']
            },
            {
                type: "password",
                label: "Password",
                width: '50%',
                required: true,
            },
            {
                type: "input",
                label: "First Name",
                required: true,
            },
            {
                type: "input",
                label: "Last Name",
                required: true,
            },
            {
                type: "input",
                label: "Home Address",
                id: "address",
                width: "50%",
                required: true,
            },
            {
                type: "input",
                label: "City",
                width: "50%",
                required: true,
            },
            {
                type: "select",
                label: "State",
                width: "50%",
                required: true,
                options: [
                    "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL",
	            "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME",
                    "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH",
                    "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI",
                    "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"
                ]
            },
            {
                type: "phone",
                label: "Phone Number",
                id: "phone",
                width: "50%",
                required: true,
            },
            {
                type: "select",
                label: "Gender",
                width: "50%",
                required: true,
                options: ['Male', 'Female'],
            },
            {
                type: "birthday",
                label: "Birthday",
                width: "50%",
                required: true,
            },
            {
                type: "text",
                list: true,
                label: "Occupations / Skills / Passions (one per line)",
                id: "skills",
                width: "100%",
            },
            {
                type: "text",
                label: "About Me",
                id: "about",
                width: "100%",
            }
        ]
    }

    // initialize
    self.init = function () {
        self.html += '<h1>New User Sign-up</h1>';

        // add to the page
        if (self.container) {
            if (append) {
                self.container.append(self.html);
            } else {
                self.container.html(self.html);
            }
            self.el = self.container.children().last();
        }
        self.form = new form (self.container, self.form_cfg, true);
    }

    self.init();
}
function initial_setup (container, append = false) {
    var self = this;
    el.call(self, container, append);

    self.form = null;
    self.form_cfg = {
        title: "Complete your Profile...",
        message: "Thank you!",
        btn_label: "Done",
        handler: function (callback) {
            let value = self.form.value();
            console.log(value);
            let data = {details: JSON.stringify(value)};
            let url = utility.api_url("update_user", fp.user.id);

            $.post(url, data)
                .fail(function(response, status) {
                    $.unblockUI();
                })
                .done(function(response, status) {
                    callback();
                })
        },
        inputs: [
            {
                type: "help",
                message: "Welcome to our flock! There are a few more <b>optional</b> steps to complete your profile..."
            },
            {
                type: 'divider',
                label: 'Personal Information',
            },
            {
                type: 'help',
                message: "You can provide some more information about yourself below. This information will appear on your profile when others search for you.",
            },
            {
                type: "text",
                list: true,
                label: "Occupations / Skills / Passions (one per line)",
                id: "skills",
                width: "100%",
                value: user.skills,
            },
            {
                type: "text",
                label: "About Me",
                id: "about",
                width: "100%",
                value: user.about,
            },
            {
                type: "break",
            },
            {
                type: 'divider',
                label: 'Family Members',
            },
            {
                type: "help",
                message: "Adding family members will help to others to understand your household. If you add children, other users will be able to search for them and find your account. If children create accounts, then parents will always be able to access those accounts.",
            },
            {
                type: "family",
                label: "Family Members",
                id: "family",
                width: "100%",
            },
        ]
    }

    // initialize
    self.init = function () {
        // add to the page
        self.form = new form (self.container, self.form_cfg);
    }

    self.init();
}
function API (fp) {
    var self = this;

    self.handler_objects = {};
    self.sock_url = utility.ws_url('api');
    self.disconnect_timeout = 20000;

    /*
     * Functions for handling the websockets connection
     */

    /* initialize the api connection */
    self.open = function () {
        // connect the socket
        self.sock = new WebSocket(self.sock_url);

        // set websocket handlers
        self.sock.onmessage = self.sock_rx;
        self.sock.onclose = self.sock_onclose;
        self.sock.onopen = self.sock_onopen;
    }

=======
    self.init();
}
function chat_thread (container, id) {
    var self = this;
    el.call(self, container);

    self.message_l = [];
    self.last_user = null;
    self.typing_timeout = 5000;
    self.typing_timer = null;
    self.typing_d = {};

    if (id.includes("=")) {
        // it's a user:user thread
        self.user_id = id.split("=")[1]
        self.user = fp.user_d[self.user_id];
        self.label = self.user.full_name;
        self.pic_html = `<img class="pic" src="${self.user.pic_url}">`;
        self.thread = fp.user_thread_d[self.user_id];
        if (self.thread) {
            self.id = self.thread.id;
        } else {
            self.id = null;
        }
    } else {
        // it's a group thread
        self.thread = fp.thread_d[id];
        if (self.thread.user) {
            let user = fp.user_d[self.thread.user];
            self.label = user.full_name;
        } else {
            self.label = self.thread.label;
        }
        self.pic_html = self.thread.pic_svg;
        self.user_id = null;
        self.id = id;
    }

    // initialize the thread
    self.init = function () {
        self.html = `
          <div id="thread">
            <div id="label">
              <span>
                ${self.pic_html}
                ${self.label}
              </span>
            </div>
            <div id="thread"></div>
            <div id="thread_input_wrapper">
              <div id="thread_input_btn">
                ${svg.plus}
              </div>
              <div id="thread_input" class="textarea" contenteditable>
              </div>
              <div id="emoji">
                <img src="${utility.static_url('img/smile.svg')}" />
              </div>
            </div>
          </div>`;

    /* detect when the connection has gone down */
    self.keepalive = function () {
        // reset the disconnect timeout
        try {
            clearTimeout(self.disconnect_timeout);
        } catch {}
        // set a new timeout
        self.disconnect_timeout = setTimeout(function () {
            self.sock.close();
        }, self.disconnect_timeout);
    }

    /* send an api query */
    self.query = function (query) {
        if (self.sock.readyState === WebSocket.OPEN) {
            self.sock.send(JSON.stringify(query));
        }
    }

    /* handle api response */
    self.sock_rx = function (e) {
        let data = JSON.parse(e.data);
        if (data.error) {
            modal.alert(data.error);
            return;
        }

        for (let name in data) {
            let opt = data[name];
            let handler;

            for (let label in self.handler_objects) {
                let el_handler = self.handler_objects[label];
                handler = el_handler[name];
                if (handler) {
                    handler(opt);
                }
            }
        }
    }

    self.register = function (obj, label) {
        if (obj.handler) {
            label = label || obj.constructor.name;
            self.handler_objects[label] = obj.handler;
        }
    }

    self.unregister = function (obj, label) {
        label = label || obj.constructor.name;
        delete self.handler_objects[label];
    }

    self.open();
}
function menu (container) {
    var self = this;
    el.call(self, container, false);

    self.menu_d = {
        Home: "home",
        Calendar: "calendar",
//        Chat: "chat",
        Directory: "directory",
        Community: "community",
    }

    // initialize
    self.init = function () {
        self.html += '<div id="menu">';

        for (var key in self.menu_d) {
            let hashtag = self.menu_d[key];

            let selected = (hashtag == fp.hash) ? "selected":"";
            self.html += `<div id="${hashtag}" class="menu_item ${selected}">${key}</div>`;
        }
        self.html += '</div>';

        self.add_to_page();
        self.init_handlers();
    }

    // initialize handlers
    self.init_handlers = function () {
        self.el.on("click", "div.menu_item", function (e) {
            let id = $(this).attr("id")
            document.location.hash = id;
        })
    }

    self.init();

}
function top_menu (container, authorized = true) {
    var self = this;
    el.call(self, container);

    self.logo_url = utility.static_url("img/logo.svg");
    self.user_menu = null;

    // initialize
    self.init = function () {
        self.html = `
          <div id="logo">
            <img src="${self.logo_url}">
          </div>`;

        self.add_to_page();
        if (authorized) {
            new notification_menu (container, true);
            self.user_menu = new user_menu (container, true);
            self.user_menu.init();
        }
    }

    self.init();
}
function user_menu (container, append = false) {
    var self = this;
    el.call(self, container, append);

    self.menu_d = {
        "Edit Profile": "settings",
        "Invite User": "invite_user",
        Logout: "logout",
    }

    // initialize the element
    self.init = function () {
        self.html = `
          <div id="user_menu">
            <img src="${fp.user.pic_url}">
            <div id="user_menu_items">`;

        for (var key in self.menu_d) {
            let hashtag = self.menu_d[key];

            let selected = (hashtag == fp.hash) ? "selected":"";
            self.html += `<div id="${hashtag}" class="menu_item ${selected}">${key}</div>`;
        }
        self.html += `</div></div>`;

        self.add_to_page();
        self.init_handlers();
    }

    // initialize handlers
    self.init_handlers = function () {
        self.el.on("click", "img", function() {
            $('div#user_menu_items').show();

            $(document).on("click", function (e) {
                $('div#user_menu_items').hide();
                $(document).off("click");
            })
            return false;
        });

        self.el.on("click", "div.menu_item", function (e) {
            $('div.menu_item').removeClass("selected");
            $(this).addClass("selected");

            let id = $(this).attr("id")
            document.location.hash = id;
        })
    }
}
function thread_object (thread_cfg) {
    var self = utility.merge(this, thread_cfg);

    // convert user id to user object
    if (self.user) {
        self.user = fp.user_d[self.user];
    }

    /*
     * initialize/build the picture html code (either profile picture or chat icon)
     */
    if (!self.user) {
        // Get the initials
        let words = self.label.split(" ")
        let initials = "";
        for (var word of words) {
            initials += word[0].capitalize();
        }
        initials = initials.slice(0,2);

        // get the color
        let color = Math.floor(Math.random()*16777215).toString(16);

        // set the html
        self.pic_svg = `<svg class="pic">
                         <circle cx="20" cy="20" r="20" fill="#${color}"/>
                         <text x="50%" y="54%" fill="white">${initials}</text>
                       </svg>`;
    }

    /*
     * Check whether the chat thread is currently being viewed
     */
    self.in_view = function () {
        return Boolean(fp.content &&
                       fp.content.constructor.name == "chat_thread" &&
                       fp.content.id == self.id);
    }

    return self;
}
function message (container, thread, config, idx, nest = false) {
    var self = this;
    el.call(self, container, append);

    self.bell_url = utility.static_url("img/bell.svg");

    // initialize
    self.init = function () {
        self.html = `
          <div id="notifications">
            <img src="${self.bell_url}">
          </div>`;

        self.add_to_page();
    }

    self.init();
}
scroll_autohide = function (obj, el) {
    el.on("scroll", _.throttle(function(e) {
        // cancel the scroll timeout
        if (obj.scroll_timeout) {
            clearTimeout(obj.scroll_timeout);
        }

        el.addClass("show_scrollbar", 1000);
        obj.scroll_timeout = setTimeout(function() {
            el.removeClass("show_scrollbar", 1000);
        }, 1000);
    }, 100));
}
cfg = {
    relationship_types: {
        'Husband': {
            gender: "Male",
            required_gender: "Female",
            unique: true,
        },
        'Wife': {
            gender: "Female",
            required_gender: "Male",
            unique: true,
        },
        'Son': {
            gender: "Male",
        },
        'Daughter': {
            gender: "Female",
        },
        'Brother': {
            gender: "Male",
        },
        'Sister': {
            gender: "Female",
        },
        'Father': {
            gender: "Male",
            unique: true,
        },
        'Mother': {
            gender: "Female",
            unique: true,
        },
        'Grandfather': {
            gender: "Male",
        },
        'Grandmother': {
            gender: "Female",
        },
        'Grandson': {
            gender: "Male",
        },
        'Granddaughter': {
            gender: "Female",
        },
    }
}
function Modal (options) {
    var self = utility.merge(this, options);
    self.modal_selector = "div.modal#modal"+self.index;
    self.overlay_selector = "div.modal-overlay#modal"+self.index;

    self.init = function() {
        var html = "";

        // add the overlay
        html += '<div class="modal show_scrollbar" id="modal'+self.index+'" hidden>'+
            self.content+
            '</div>'+
            '<div class="modal-overlay" id="modal'+self.index+'">'+
            '</div>';

        $('body').append(html);

        self.modal_element = $(self.modal_selector);
        self.overlay_element = $(self.overlay_selector);

        self.modal_element
            .css({
                'width': self.width,
                'min-width': self.minWidth,
                'max-width': self.maxWidth,
                'height': self.height,
                'min-height': self.minHeight,
                'max-height': self.maxHeight,
                'overflow': self.overflow,
                'padding': self.padding,
            })
            .show();

        /* afterShow handler */
        if (self.afterShow) {
            self.afterShow(self);
        }

        /* add the event handlers */
        self.overlay_element.on('click', function() {
            self.close();
        })
    }

    self.close = function() {
        /* remove from modal stack */
        modal.stack.pop();

        /* remove the elements */
        self.overlay_element.remove();
        self.modal_element.remove();

        /* afterClose handler */
        if (self.afterClose) {
            self.afterClose(self);
        }
    }

    self.init();

    return self;
}

    console.log(user);
    console.log(thread);
    if (user || thread.user) {
        self.user = user || thread.user;
        self.user_id = self.user.id;
        self.label = self.user.full_name;
        self.pic_html = `<img class="pic" src="${self.user.pic_url}">`;
        self.thread_id = `user=${self.user.id}`;
    } else {
        self.thread_id = thread.id;
        self.user_id = "";
        self.pic_html = thread.pic_svg;
        self.label = thread.label;
    }

    // see if the thread has unread content
    self.unread = thread && !thread.in_view() && thread.seen[fp.user.id] < thread.length-1;

    self.init = function () {
        let unread_class = self.unread ? "unread":"";
        let active_class = (self.user && self.user.active) ? "active":"";

        self.html = `
            <div class="badge thread ${active_class} ${unread_class}" id="${self.user_id}">
              ${self.pic_html}
              <svg class="active" height="10" width="10">
                <circle cx="5" cy="5" r="5"/>
              </svg>
              <div class="details">
                <span class="name">${self.label}</span>
                <svg class="unread" height="8" width="8">
                  <circle cx="4" cy="4" r="4"/>
                </svg>
              </div>
            </div>`;

    // map aliases
    if (options.scrolling == "yes") {
        options.overflow = 'scroll';
    }

    let mdl = new Modal(options)
    modal.stack.push(mdl);

    return mdl;
}

/* close the top modal window */
modal.close = function () {
    modal.stack.last().close();
}

/* close all modal windows */
modal.closeAll = function () {
    var length = modal.stack.length;
    for (var i = 0; i < length; i++) {
        modal.stack.last().close();
    }
}

        let filtered_user_d = fp.filter_users(self.search, false);
        let filtered_thread_d = fp.filter_threads(self.search);

        // remove users already having threads
        for (let id in filtered_thread_d) {
            let thread = filtered_thread_d[id];
            if (thread.user) {
                delete filtered_user_d[thread.user.id];
            }
        },
    });
}

        // add existing threads
        for (let id in filtered_thread_d) {
            let thread = filtered_thread_d[id];
            new chat_badge (self.el, thread);
        }
        // add other users
        for (let id in filtered_user_d) {
            let user = filtered_user_d[id];
            new chat_badge (self.el, null,  user);
        }
    }

    modal.open(html, {
        afterShow: function(self) {
            ret = false;
            $('#popup_ok_btn', self.modal_element).on("click tap", function(e) {
                self.close();
            });
        },
        afterClose: after_fn,
    });
}

/* widget popup */
modal.widget = function (widget_cfg) {

    // augment the widget config with sizing optinos
    widget_cfg = utility.merge(widget_cfg, {
        width: "100%",
        height: "100%",
    })

    // initialize the dashboard config
    var dashboard_config = {
        widgets: {
            widget: widget_cfg
        }
    };

    let mdl = modal.open('<div id="widget_popup"></div>', {
        padding: 0,
        overflow: "hidden",
        maxHeight: "600px",
        width: "calc(100vw - 150px)",
        height: "calc(100vh - 150px)",
        afterClose: function (self) {
            self.dashboard.close();
        }
    });

    mdl.dashboard = new Dashboard('div.modal#modal'+mdl.index+' #widget_popup', dashboard_config, {});
}
/*
 * This file contains "utility" functions.
 * These are any functions that are generally useful and NOT Syfter specific.
 * Syfter general functions should go in syfter.lib.js.
 */

utility = {};

/* Create a python editor textbox (using codemirror) */
utility.python_editor = function (el) {
    let placeholder = $(el).attr('placeholder');
    if (placeholder && !$(el).val()) {
        $(el).val(placeholder);
    }
    let cm = CodeMirror.fromTextArea(el, {
        lineNumbers: true,
        mode: "python",
        smartIndent: false,
        indentUnit: 4,
        matchBrackets: true,
        inputStyle: "contenteditable",
        extraKeys: {
            Tab: function(cm) {
                if (!cm.getSelection().length) {
                    cm.replaceSelection(" ".repeat(cm.getOption("indentUnit")));
                } else {
                    return CodeMirror.Pass;
                }
            },
            Enter: function(cm) {
                return cm.replaceSelection("\n");
            }
        }
    });
    let wrapper = $(cm.getWrapperElement());
    // cm.on("focus", function(cm, e) {
    //  $('div.CodeMirror-gutter div.CodeMirror-linenumber', wrapper).show();
    // });
    // cm.on("blur", function(cm, e) {
    //  $('div.CodeMirror-gutter div.CodeMirror-linenumber', wrapper).hide();
    // });
    cm.on("change", function(e) {
        try {
            clearTimeout(cm.writeback_timeout);
        } catch (err) {}

        cm.writeback_timeout = setTimeout(() => {
            let val = cm.getValue();
            // if it's the same as the placeholder, nullify
            if (placeholder == val) {
                val = "";
            }

            // write to the original textarea
            $(el)
                .val(val)
                .trigger('input');
        }, 400);
    });
}

/* Create a json editor textbox (using codemirror) */
utility.json_editor = function (el) {
    let placeholder = $(el).attr('placeholder');
    if (placeholder && !$(el).val()) {
        $(el).val(placeholder);
    }
    let cm = CodeMirror.fromTextArea(el, {
        mode: "javascript",
        json: true,
        indentUnit: 4,
        matchBrackets: true,
        autoCloseBrackets: true,
        inputStyle: "contenteditable",
        extraKeys: {
            Tab: function(cm) {
                if (!cm.getSelection().length) {
                    cm.replaceSelection(" ".repeat(cm.getOption("indentUnit")));
                } else {
                    return CodeMirror.Pass;
                }
            },
        }
    });
    let wrapper = $(cm.getWrapperElement());
    cm.on("change", function(e) {
        try {
            clearTimeout(cm.writeback_timeout);
        } catch (err) {}

        cm.writeback_timeout = setTimeout(() => {
            let val = cm.getValue();

            // check syntax
            try {
                if (val.length) {
                    JSON.parse(val);
                }
                wrapper.removeClass('cm-parseerror');
            } catch {
                wrapper.addClass('cm-parseerror');
            }

            // if it's the same as the placeholder, nullify
            if (placeholder == val) {
                val = "";
            }

            // write to the original textarea
            $(el)
                .val(val)
                .trigger('input');
        }, 400);
    });
}

/* determine whether an element is empty */
utility.notEmpty = function(val) {
    return (val && Object.keys(val).length > 0);
}

/* determine whether an element is an object */
utility.isObject = function (val) {
    return (val.constructor === Object);
}

/* determine whether an object is empty */
utility.isObjectEmpty = function (val) {
    return (Object.keys(val).length == 0);
}

/* check if the element is null or undefined */
utility.isNull = function (val) {
    return (val === null || val == undefined);
}

utility.blockUI = function (msg) {
    if (msg !== undefined) {
        msg = '<h1>'+msg+'<h1>';
    }

    $.blockUI({
        message: msg,
        css: {
            border: 'none',
            padding: '10px',
            backgroundColor: '#000',
            '-webkit-border-radius': '10px',
            '-moz-border-radius': '10px',
            opacity: .5,
            color: '#fff',
            cursor: 'default'
        },
        overlayCSS: {
            cursor: 'default'
        },
        fadeIn: 0,
        fadeOut: 0
    });
}

utility.unblockUI = function () {
    $.unblockUI();
}

utility.blockEl = function (element, msg) {
    if (msg == undefined)
        msg = null

    element.block({
        message: msg,
        css: {
            border: 'none',
            padding: '15px',
            backgroundColor: '#fff',
            '-webkit-border-radius': '10px',
            '-moz-border-radius': '10px',
            opacity: 1,
            color: '#fff',
            cursor: 'default'
        },
        fadeIn: 0,
        fadeOut: 0
    });
}

utility.unblockEl = function (element) {
    element.unblock();
}

function remove_whitespace(str) {
    return str.replace(/ /g,'');
}

function get_regex (str) {
    var re;
    try {
        re = new RegExp(str, 'i');
    } catch (err) {
        re = new RegExp("\\" + str, 'i');
    }
    return re
}

utility.findAll = function(regex, string) {
    re = new RegExp(str, 'ig');
}

utility.escape = function (unsafe) {
    try {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    } catch {
        return unsafe;
    }
}

utility.selector_enc = function (str) {
    return str
        .replace(/([#;?%&,.+*~\':"!^$[\]()=>|\/@])/g,'\\$1');
}

utility.deep_copy = function (d) {
    return JSON.parse(JSON.stringify(d));
}

utility.name_enc = function (str) {
    return encodeURIComponent(
        str.replace(/\//g,'__'));
}

emoticon_map = {
    ':)': '&#128578;',
    ':-)': '&#128578;',
    ':D': '&#128512;',
    ':-D': '&#128512;',
    ':/': '&#128533;',
    ':-/': '&#128533;',
    ';)': '&#128521;',
    ';-)': '&#128521;',
    ':p': '&#128523;',
    ':-p': '&#128523;',
    ':(': '&#128577;',
    ':-(': '&#128577;',
    ";p": "&#128540;",
    ";-p": "&#128540;",
    ":'(": "&#128546;",
    "<3": "\u2764\uFE0F",
    "</3": "\uD83D\uDC94",
};

function escapeSpecialChars(regex) {
   return regex.replace(/([()[{*+.$^\\|?])/g, '\\$1');
 }

utility.emoticon_replace = function(text) {
    for (var i in emoticon_map) {
        var regex = new RegExp(escapeSpecialChars(i), 'gim');
        text = text.replace(regex, emoticon_map[i]);
    }
    return text;
};
utility.emoticon_replace = function (text) {
    for (var key in emoticon_map) {
        text = text.replace(key, emoticon_map[key]);
    }
    return text;
}

function yaml_enc (str) {
    /* condition the text */
    // space after colon
    str = str.replace(/(\n[^:]*):([^\s])/g, '$1: $2');
    // space after '-' for list
    str = str.replace(/(\n\s*)-([^\s])/g, '$1- $2');

    return str;
}

utility.api_url = function (url, path = []) {
    return [api_root, url].concat(path).join('/') + '/';
}

utility.static_url = function (str) {
    return static_root + str;
}

utility.ws_url = function(url) {
    var ws_proto = window.location.protocol == "https:" ? "wss" : "ws";
    return ws_proto + '://' + window.location.host + [root, 'ws', url].join('/') + '/';
}

utility.download_json_as_file = function(data, filename) {
    // format the data
    var blob = new Blob([JSON.stringify(data)], {type: "application/json"});

    // Create an invisible A element
    const a = document.createElement("a")
    a.style.display = "none";
    a.download = filename;
    a.href = window.URL.createObjectURL(blob);

    // add to the page
    document.body.appendChild(a);

    // Trigger the download by simulating click
    a.click();

    // Cleanup
    window.URL.revokeObjectURL(a.href);
    document.body.removeChild(a);
}

utility.range = function(start, end) {
    var size = end - start;
    return [...Array(size).keys()].map(i => i + start);
}

utility.merge = function (a, b) {
    if (Array.isArray(a)) {
        return a.concat(b);
    } else {
        return {...a, ...b};
    }
}

utility.tree_path = function (tree) {
    let path_d = {}
    utility.tree_path_helper(path_d, tree);
    return path_d;
}

utility.tree_path_helper = function (path_d, pointer, path) {
    path = path || [];

    for (var key in pointer) {
        path_d[key] = [...path];
        path.push(key);
        utility.tree_path_helper(path_d, pointer[key], path);
    }
}

utility.strip_html = function(html) {
    let el = $.parseHTML(html);

    // filter the nodes
    var filter = ['Text', 'HTMLTitleElement', 'HTMLStyleElement', 'Comment',
                  'HTMLMetaElement', 'HTMLLinkElement', 'HTMLImageElement'];
    var filtered_node_l = [];
    for (var i = 0; i < el.length; i++) {
        var node = el[i];
        if (filter.indexOf(node.constructor.name) < 0) {
            filtered_node_l.push(node);
        }
    }
    return filtered_node_l;
}

utility.basename = function (path) {
    return path.split('/').reverse()[0];
}

/*
 * Prototypes for built in types
 */
String.prototype.startsWith = function (str)
{
    return this.indexOf(str) == 0;
}

String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
}
String.prototype.lower = function() {
    return this.toLowerCase();
}

Array.prototype.last = function(val) {
    if (val) {
        this[this.length-1] = val;
    } else {
        return this[this.length-1];
    }
}

Array.prototype.remove = function(val) {
    var index = this.indexOf(val);
    if (index > -1) {
        this.splice(index, 1);
    }
    return this;
}

Array.prototype.contains = function(val) {
    return (this.indexOf(val) >= 0);
}

Array.prototype.sortIndexOf = function(val) {
    var index = this.indexOf(val);
    if (index < 0) {
        index = this.length;
    }
    return index;
}

Array.prototype.sortByKey = function(key) {
    return this.sort(function(a, b) {
        var x = b[key]; var y = a[key];
        return ((x <= y) ? 1 : -1);
    });
}

Array.prototype.shuffle = function() {
    var currentIndex = this.length,  randomIndex;

    // While there remain elements to shuffle...
    while (currentIndex != 0) {

        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;

        // And swap it with the current element.
        [this[currentIndex], this[randomIndex]] = [
            this[randomIndex], this[currentIndex]];
    }

    return this;
}
Array.prototype.isEmpty = function() {
    return this.length === 0;
}

Array.prototype.toDict = function(key) {
    var dict = {};
    for (var i = 0; i < this.length; i++) {
        let el = this[i];
        dict[el[key]] = el;
    }
    return dict;
}

utility.getTimeFromEpoch = function (epoch) {
    return moment(epoch * 1000);
}
utility.getDateString = function (date) {
    if (typeof date == "number") date = utility.getTimeFromEpoch(date);

    var ret = "";
    var now = moment();

    // is the day the same?
    if (now.diff(date, 'months', true) > 10) {
        ret = date.format('MM/DD/YYYY');
    } else if (now.diff(date, "days") > 6) {
        ret = date.format('MMM DD');
    } else {
        ret = date.format('ddd');
    }

    return ret;
}
utility.getTimeString = function (date, mil_time, seconds) {
    if (typeof date == "number") date = utility.getTimeFromEpoch(date);
    if (mil_time === undefined) mil_time = false;
    if (seconds === undefined) seconds = false;

    var ret = "";
    var now = moment();

    // is the day the same?
    if (now.diff(date, 'months', true) > 10) {
        ret += date.format('MM/DD/YYYY ');
    } else if (now.diff(date, "days") > 1) {
        if (now.diff(date, "days") > 6) {
            ret += date.format('MMM DD ');
        } else {
            ret += date.format('ddd ');
        }
    }

    if (mil_time) {
        if (seconds)
            ret += date.format('HH:mm:ss');
        else
            ret += date.format('HH:mm');
    } else {
        if (seconds)
            ret += date.format('h:mm:ss A');
        else
            ret += date.format('h:mm A');
    }
    return ret
}

utility.notify = function (title, body, icon, link) {
    if (Notification.permission !== 'granted')
        Notification.requestPermission();
    else {
        var notification = new Notification(title, {
            icon: icon,
            body: body,
        });
        notification.onclick = function() {
            document.location.hash = link;
        };
    }
}

utility.placeCursorAtEnd = function (el) {
    el.focus();
    if (typeof window.getSelection != "undefined"
        && typeof document.createRange != "undefined") {
        var range = document.createRange();
        range.selectNodeContents(el);
        range.collapse(false);
        var sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
    } else if (typeof document.body.createTextRange != "undefined") {
        var textRange = document.body.createTextRange();
        textRange.moveToElementText(el);
        textRange.collapse(false);
        textRange.select();
    }
}
utility.elInView  = function (el) {
    var docViewTop = $(window).scrollTop();
    var docViewBottom = docViewTop + $(window).height();

    var elTop = $(el).offset().top;
    var elBottom = elTop + $(el).height();

    return ((elBottom <= docViewBottom) && (elTop >= docViewTop));
}
svg = {
    plus: `<svg viewBox="0 0 60 60">
             <rect y="25" width="60" height="10" rx="3.68"/>
             <rect x="25" width="10" height="60" rx="3.68"/>
           </svg>`,
    circle: `<svg viewBox="0 0 60 60">
               <circle cx="30" cy="30" r="30" />
             </svg>`,
};
cfg = {
    relationship_types: {
        'Husband': {
            gender: "Male",
            required_gender: "Female",
            unique: true,
        },
        'Wife': {
            gender: "Female",
            required_gender: "Male",
            unique: true,
        },
        'Son': {
            gender: "Male",
        },
        'Daughter': {
            gender: "Female",
        },
        'Brother': {
            gender: "Male",
        },
        'Sister': {
            gender: "Female",
        },
        'Father': {
            gender: "Male",
            unique: true,
        },
        'Mother': {
            gender: "Female",
            unique: true,
        },
        'Grandfather': {
            gender: "Male",
        },
        'Grandmother': {
            gender: "Female",
        },
        'Grandson': {
            gender: "Male",
        },
        'Granddaughter': {
            gender: "Female",
        },
    }
}
function Modal (options) {
    var self = utility.merge(this, options);
    self.modal_selector = "div.modal#modal"+self.index;
    self.overlay_selector = "div.modal-overlay#modal"+self.index;

    self.init = function() {
        var html = "";

        // add the overlay
        html += '<div class="modal show_scrollbar" id="modal'+self.index+'" hidden>'+
            self.content+
            '</div>'+
            '<div class="modal-overlay" id="modal'+self.index+'">'+
            '</div>';

        $('body').append(html);

        self.modal_element = $(self.modal_selector);
        self.overlay_element = $(self.overlay_selector);

        self.modal_element
            .css({
                'width': self.width,
                'min-width': self.minWidth,
                'max-width': self.maxWidth,
                'height': self.height,
                'min-height': self.minHeight,
                'max-height': self.maxHeight,
                'overflow': self.overflow,
                'padding': self.padding,
            })
            .show();

        /* afterShow handler */
        if (self.afterShow) {
            self.afterShow(self);
        }

        /* add the event handlers */
        self.overlay_element.on('click', function() {
            self.close();
        })
    }

    self.close = function() {
        /* remove from modal stack */
        modal.stack.pop();

        /* remove the elements */
        self.overlay_element.remove();
        self.modal_element.remove();

        /* afterClose handler */
        if (self.afterClose) {
            self.afterClose(self);
        }
    }

    self.init();

    return self;
}


modal = {};
// track all of the modal entries
modal.stack = []

/* create a new modal */
modal.open = function (html, options) {
    // default options
    var defaults = {
        content     : html,
        minWidth    : 250,
        minHeight   : 20,
        maxHeight   : "calc(100vh - 100px)",
        overflow: 'visible',
        padding: "15px",
        index: modal.stack.length,
    }

    // merge options with defaults
    options = $.extend({}, defaults, options);

    // map aliases
    if (options.scrolling == "yes") {
        options.overflow = 'scroll';
    }

    let mdl = new Modal(options)
    modal.stack.push(mdl);

    return mdl;
}

/* close the top modal window */
modal.close = function () {
    modal.stack.last().close();
}

/* close all modal windows */
modal.closeAll = function () {
    var length = modal.stack.length;
    for (var i = 0; i < length; i++) {
        modal.stack.last().close();
    }
}

/* confirmation popup */
modal.confirm = function (msg, yes_callback, no_callback) {
    msg = msg || "Are you sure?";
    var ret;

    var html = '' +
        '<table class="popup_table borderless">'+
        '<tr><td colspan=2>'+msg+'</td></tr>'+
        '<tr>'+
        '<td style="padding-top: 5px">'+
        '<button id="confirm_no_btn" class="std_button" style="width: 100px">No</button>'+
        '<button id="confirm_yes_btn" class="std_button" style="width: 100px">Yes</button></td>'+
        '</tr></table>';

    modal.open(html, {
        afterShow: function(self) {
            ret = false;
            $('#confirm_no_btn, #confirm_yes_btn').on("click tap", function(e) {
                ret = (e.target.id == "confirm_yes_btn");
                self.close();
            });
        },
        afterClose: function(self) {
            if (ret && yes_callback) {
                yes_callback.call(this);
            } else if (!ret && no_callback) {
                no_callback.call(this)
            }
        },
    });
}

/* alert popup */
modal.alert = function (msg, callback) {
    var ret;
    var after_fn;

    var html = '' +
        '<table class="popup_table borderless">'+
        '<tr><td colspan=2>'+msg+'</td></tr>'+
        '<tr><td style="padding-top: 5px;">'+
        '<button id="popup_ok_btn" class="std_button" style="width: 100px">OK</button></td>'+
        '</tr></table>';

    if (callback) {
        after_fn = function(self) {
            callback.call(this);
        }
    }

    modal.open(html, {
        afterShow: function(self) {
            ret = false;
            $('#popup_ok_btn', self.modal_element).on("click tap", function(e) {
                self.close();
            });
        },
        afterClose: after_fn,
    });
}

/* widget popup */
modal.widget = function (widget_cfg) {

    // augment the widget config with sizing optinos
    widget_cfg = utility.merge(widget_cfg, {
        width: "100%",
        height: "100%",
    })

    // initialize the dashboard config
    var dashboard_config = {
        widgets: {
            widget: widget_cfg
        }
    };

    let mdl = modal.open('<div id="widget_popup"></div>', {
        padding: 0,
        overflow: "hidden",
        maxHeight: "600px",
        width: "calc(100vw - 150px)",
        height: "calc(100vh - 150px)",
        afterClose: function (self) {
            self.dashboard.close();
        }
    });

    mdl.dashboard = new Dashboard('div.modal#modal'+mdl.index+' #widget_popup', dashboard_config, {});
}
function badge (container, user, type, append = false, label = null) {
    var self = this;
    el.call(self, container, append);

    self.link = Boolean(user.id && !["profile", "family", "select", "selected"].includes(type));
    self.link_class = Boolean(user.id && !["profile", "selected"].includes(type)) ? "" : "nolink";
    self.chat_icon = utility.static_url('img/chat.svg');

    // initialize the badge
    self.init = function () {
        self.html = `<div id=${user.id} class="badge ${type} ${self.link_class}" >`;
        switch (type) {
        case "small":
            self.html += `
                <img class="pic" src="${user.pic_url}"><br>
                <span class="name">${user.full_name}</span>`;
            if (label) {
                self.html += `<br><span class="label">${label}</span>`;
            }
            break;
        case "search":
            self.html += `
                <img class="pic" src="${user.pic_url}">
                <div class="details">
                  <span class="name">${user.full_name}</span><br>
                  <span class="type">${user.membership_status}</span><br>
                  <span class="email">${user.email}</span> | <span class="phone">${user.phone}</span><br>
                  <span class="address">${user.address}</span>
                </div>`;
            break;
        case "family":
            self.html += `
                <img class="pic" src="${user.pic_url}">
                <div class="details">
                  <span class="name">${user.full_name}</span> | <span class="email">${user.email}</span>
                </div>`;
            break;
        case "select":
            self.html += `
                <img class="pic" src="${user.pic_url}">
                <div class="details">
                  <span class="name">${user.full_name}</span> | <span class="email">${user.email}</span>
                </div>`;
            break;
        case "selected":
            self.html += `
                <img class="pic" src="${user.pic_url}"><br>
                <span class="name">${user.full_name}</span>
                <span class="remove">X</span>`;
            break;
        case "profile":
            self.html += `
                <img class="pic" src="${user.pic_url}">
                <div class="details">
                  <span class="name">${user.full_name}</span><br>
                  <span class="type">${user.membership_status}</span><br>
                  <span class="phone"><a href-"tel: ${user.phone}">${user.phone}</a></span><br>
                  <span class="email"><a href="mailto: ${user.email}">${user.email}</a></span><br>
                  <span class="address">${user.address}</span><br>`;
            if (user != fp.user) {
                self.html += `
                  <button class="chat_me" />Send Message<img src="${utility.static_url('img/chat.svg')}" />
                  </button>`;
            }
            self.html += `</div>`;
            break;
        }
        self.html += '</div>';

        self.add_to_page();
        self.init_handlers();
    }

    self.init_handlers = function () {
        self.el.off("click");

        if (self.link) {
            self.el.on("click", function (e) {
                document.location.hash = 'directory/' + user.id;
            })
        } else {
            self.el.on("click", "button.chat_me", function (e) {
                document.location.hash = 'chat/user=' + user.id;
            })
        }
    }

    self.init();
}
function directory (container) {
    var self = this;
    el.call(self, container);

    // initialize
    self.init = function () {
        self.html = `
          <div id="directory">
            <h1>Directory</h1>
            <input type="search" placeholder="Search..."></input>
            <div id="results"></div>
          </div>`;

        self.add_to_page();
        self.search_el = self.container.find('input')
        self.results_el = self.container.find('div#results')

        self.init_handlers();
    }

    self.init_handlers = function () {
        /* on search input */
        self.search_el.on("input", function(e) {
            let filter = $(this).val();
            if (filter) {
                new results (self.results_el, filter);
            } else {
                self.results_el.empty();
            }
        })
    }

    self.init();

}
function infocard (container, label, text, append = true) {
    var self = this;
    self.container = container;
    self.el = null;
    self.html = "";

    // initialize the badge
    self.init = function () {
        self.html = '<div class="card">'+
            '<div class="label">' + label  + '</div>';
        if (text) {
            self.html += '<div class="text">' + text + '</div>';
        }

        if (append) {
            self.container.append(self.html);
        } else {
            self.container.html(self.html);
        }
        self.el = self.container.children().last();
    }

    self.init();
}
function profile (container, user) {
    var self = this;
    self.container = container;
    self.el = null;
    self.user = user;
    self.html = "";

    // initialize the badge
    self.init = function () {
        self.html = '<div class="profile"></div>';

        self.container.html(self.html);
        self.el = self.container.children().first();

        // badge
        self.badge = new badge(self.el, user, "profile");

        // family
        if (user.family && user.family.length) {
            new familycard(self.el, user.family);
        }

        // skills
        if (user.skills && user.skills.length) {
            let text = "";
            for (var skill of user.skills) {
                text += skill + '<br>';
            }
            new infocard(self.el, "Occupations / Skills / Passions", text)
        }

        // about
        if (user.about) {
            new infocard(self.el, "About", user.about);
        }
    }

    self.init();
}
function familycard (container, family, append = true) {
    var self = this;
    self.container = container;
    self.el = null;
    self.html = "";

    // initialize the badge
    self.init = function () {
        self.html = '<div class="card family">'+
            '<div class="label">Family</div>'+
            '<div class="family"></div>';

        // add to dom
        if (append) {
            self.container.append(self.html);
        } else {
            self.container.html(self.html);
        }
        self.el = self.container.children().last();

        for (let rel of family) {
            let user;
            if (rel.user_id) {
                user = fp.user_d[rel.user_id];
            } else {
                user = {
                    full_name: rel.name,
                    pic_url: utility.static_url("profile_pics/avatar.svg")
                };
            }
            let type = rel.type.capitalize();
            if (user) {
                new badge (self.el, user, "small", true, type);
            }
        }
    }

    self.init();
}
function results (container, search) {
    var self = this;
    el.call(self, container);

    self.search = search.toLowerCase();

    // initialize
    self.init = function () {
        self.html = '<div id="results"></div>';
        self.add_to_page();

        let filtered_user_d = fp.filter_users(self.search, true);

        for (let id in filtered_user_d) {
            let user = filtered_user_d[id];
            new badge (self.el, user, "search", append = true);
        }
    }

    self.init();
}
function user_object (config) {
    var self = utility.merge(this, config);

    // initialize attributes
    self.pic_url = utility.static_url('profile_pics/'+ (self.pic || "avatar.svg"));

    self.possible_relationships = function () {
        let taken = new Set();
        for (let rel of self.family) {
            let type_details = cfg.relationship_types[rel.type];
            if (type_details.unique) {
                taken.add(rel.type);
            }
        }

        let rel_l = [];
        for (var type_label in cfg.relationship_types) {
            let type_details = cfg.relationship_types[type_label];

            // make sure we're the right gender
            if (type_details.required_gender && self.gender != type_details.required_gender) {
                continue;
            }

            // make sure this isn't a unique relationship that's already set
            if (type_details.unique && taken.has(type_label)) {
                continue;
            }

            rel_l.push(type_label);
        }
        return rel_l;
    }

    return self;
}
function flockpocket () {
    var self = this;
    self.connected = true;
    self.user_d = null;
    self.user = null;
    self.thread_d = {};
    self.user_thread_d = {};
    self.auth = !location.href.includes("user_activate");
    self.hash = window.location.hash.substring(1);
    self.active = false;
    self.activeTimeout = null;
    self.content = null;

    self.init = function () {
        if (self.auth) {
            utility.blockUI();

            // Add elements
            self.api = new API(self);

            // register with the api
            self.api.register(self);
        } else {
            let id = location.href.split("/")[4];
            new top_menu($("#top_menu"), false);
            new new_user($("#content"), id);
        }
    }

    self.init_handlers = function () {
        $(document).on("click input", function(e) {
            self.set_active();
        })

        scroll_autohide(self, $('#content'));
    }

    self.set_active = function () {
        if (!self.active) {
            if (self.content && self.content.on_active) {
                self.content.on_active();
            }
            fp.api.query({
                'send_active': {
                    active: true,
                }
            })
        }
        self.active = true;
        if (self.active_timeout) {
            clearTimeout(self.active_timeout);
        }
        self.active_timeout = setTimeout(() => {
            self.unset_active();
            self.active_timeout = null;
        }, 60000);
    }

    self.unset_active = function () {
        self.active = false;
        fp.api.query({
            'send_active': {
                active: false,
            }
        })
    }

    self.init_ui = function () {
        self.menu = new menu($("#leftbar"));
        self.top_menu = new top_menu($("#top_menu"));
        self.chat = new chat($("#rightbar"));

        self.init_handlers();
    }

    self.filter_users = function(search, include_me, gender) {
        let filtered_user_d = {};
        search = '^' + search;

        for (let id in self.user_d) {
            let user = self.user_d[id];
            let regex = new RegExp(search, "i");
            let labels = user.full_name.split(/[\s\/]+/);
            if ((include_me || id != fp.user.id) &&
                (!gender || user.gender == gender)) {
                for (var lbl of labels) {
                    if (lbl.search(regex) >= 0) {
                        filtered_user_d[id] = user;
                    }
                }
            }
        }

        return filtered_user_d;
    }

    self.filter_threads = function(search) {
        let filtered_thread_d = {};
        search = '^' + search;

        for (let id in self.thread_d) {
            let thread = self.thread_d[id];
            let regex = new RegExp(search, "i");
            let labels = (thread.label || thread.user.full_name).split(/[\s\/]+/);
            for (var lbl of labels) {
                if (lbl.search(regex) >= 0) {
                    filtered_thread_d[id] = thread;
                    break;
                }
            }
        }

        return filtered_thread_d;
    }

    self.set_connected = function () {
        if (!self.connected) {
            $.unblockUI();
        }
        self.connected = false;
    }

    self.set_disconnected = function () {
        utility.blockUI("Disconnected :-(");
        self.connected = false;
    }

    self.set_hash = function(path) {
        document.location.hash = path;
    }

    window.onhashchange = function(e) {
        // clear the api handlers
        if (self.content) {
            self.api.unregister(self.content);
        }

	// get the page hash
        self.hash = window.location.hash.substring(1);
        let [page, id] = self.hash.split("/");

	// remove selected menu item
        $('div.menu_item').removeClass("selected");
	if (page) {
	    $(`div.menu_item#${page}`).addClass("selected");
	}

        switch(page) {
        case "directory":
	    if (id) {
		self.content = new profile($('#content'), self.user_d[id]);
	    } else {
		self.content = new directory($("#content"));
	    }
            break
        case "settings":
            self.content = new settings($("#content"));
            break
        case "setup":
            self.content = new initial_setup($("#content"));
            break
        case "invite_user":
            self.content = new invite_user($("#content"));
            break
        case "chat":
            if (id) {
                self.content = new chat_thread($("#content"), id);
            } else {
                //self.chat = new chat($("#content"));
            }
            break;
        case "logout":
            window.location.href = "/logout";
            break;
        }

        self.set_active();
    }

    self.add_thread = function (thread) {
        self.thread_d[thread.id] = thread;
        if (thread.user) {
            thread.user = self.user_d[thread.user];
            self.user_thread_d[thread.user.id] = thread;
        }
        thread.in_view = function () {
            return Boolean(fp.content &&
                           fp.content.constructor.name == "chat_thread" &&
                           fp.content.id == thread.id);
        }
    }

    /*
     * websocket handlers
     */
    self.handler = {
        /* The initial configuration is received */
        ui_config:  function (opt) {
            console.log(opt)
            self.user_d = opt.user_d || {};

            // initialize the user objects
            for (let id in self.user_d) {
                let user_cfg = self.user_d[id];
                self.user_d[id] = new user(user_cfg);
            }
            self.user = self.user_d[opt.user_id];

            // initialize the threads
            for (let id in opt.thread_d) {
                let thread = opt.thread_d[id];
                self.add_thread(thread);
            }

            self.init_ui();
            window.onhashchange();
            utility.unblockUI();
        },

        /* somebody sent a message */
        message: function (opt) {
            let message = opt.message;
            if (message.user != self.user.id) {
                let icon = self.user_d[message.user].pic_url;
                utility.notify("New Message!", message.text, icon, 'chat');
            }
        },

        /* A thread was created */
        new_thread: function (thread) {
            self.add_thread(thread);
        },

        /* a user was updated */
        user: function (user) {
	    // set the img link
	    user.pic_url = utility.static_url('profile_pics/'+ (user.pic || "avatar.svg"));

	    // store in dictionary
	    self.user_d[user.id] = user;
	    if (user.id == self.user.id) {
	        self.user = user;
	    }
        }
    }
}
function user_object (config) {
    var self = utility.merge(this, config);

    // initialize attributes
    self.pic_url = utility.static_url('profile_pics/'+ (self.pic || "avatar.svg"));

$(document).ready(function(){
    /* this is required for django CSRF handling */
    $.ajaxSetup({
        beforeSend: function(xhr, settings) {
            if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {
                // Only send the token to relative URLs i.e. locally.
                xhr.setRequestHeader("X-CSRFToken",
                                     $("input[name=csrfmiddlewaretoken]").val());
            }
        }
    });

    os = navigator.platform;
    if (!(os.startsWith("Mac"))) {
        $('body').addClass('windows');
    }

    fp = new flockpocket();
    fp.init();
});



